package dsAssignments;

class BSTNode {
    int data;
    BSTNode left, right;
    BSTNode(int data) { this.data = data; }
}

class BST {
    private BSTNode root;
    
    void insert(int data) { root = insertRec(root, data); }
    private BSTNode insertRec(BSTNode node, int data) {
        if (node == null) return new BSTNode(data);
        if (data < node.data) node.left = insertRec(node.left, data);
        else node.right = insertRec(node.right, data);
        return node;
    }
    
    boolean search(int key) { return searchRec(root, key); }
    private boolean searchRec(BSTNode node, int key) {
        if (node == null) return false;
        if (node.data == key) return true;
        return key < node.data ? searchRec(node.left, key) : searchRec(node.right, key);
    }
    
    void inorder() { inorderRec(root); System.out.println(); }
    private void inorderRec(BSTNode node) {
        if (node != null) {
            inorderRec(node.left);
            System.out.print(node.data + " ");
            inorderRec(node.right);
        }
    }
    
    public static void main(String[] args) {
        BST bst = new BST();
        bst.insert(50); bst.insert(30); bst.insert(70);
        bst.insert(20); bst.insert(40); bst.insert(60); bst.insert(80);
        bst.inorder();
        System.out.println("Search 40: " + bst.search(40));
    }
}
