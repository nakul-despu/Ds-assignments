package dsAssignments;

import java.util.*;

class TreeNode {
    int data;
    TreeNode left, right;
    TreeNode(int data) { this.data = data; }
}

class BinaryTree {
    private int preIndex = 0;

    TreeNode buildTreePre(int[] inorder, int[] preorder, int inStart, int inEnd, Map<Integer, Integer> map) {
        if (inStart > inEnd) return null;
        TreeNode node = new TreeNode(preorder[preIndex++]);
        if (inStart == inEnd) return node;
        int inIndex = map.get(node.data);
        node.left = buildTreePre(inorder, preorder, inStart, inIndex - 1, map);
        node.right = buildTreePre(inorder, preorder, inIndex + 1, inEnd, map);
        return node;
    }

    private int postIndex;
    TreeNode buildTreePost(int[] inorder, int[] postorder, int inStart, int inEnd, Map<Integer, Integer> map) {
        if (inStart > inEnd) return null;
        TreeNode node = new TreeNode(postorder[postIndex--]);
        if (inStart == inEnd) return node;
        int inIndex = map.get(node.data);
        node.right = buildTreePost(inorder, postorder, inIndex + 1, inEnd, map);
        node.left = buildTreePost(inorder, postorder, inStart, inIndex - 1, map);
        return node;
    }

    void inorder(TreeNode root) {
        if (root != null) {
            inorder(root.left);
            System.out.print(root.data + " ");
            inorder(root.right);
        }
    }

    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        int[] inorder = {20, 30, 40, 50, 60, 70, 80};
        int[] preorder = {50, 30, 20, 40, 70, 60, 80};
        int[] postorder = {20, 40, 30, 60, 80, 70, 50};
        
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) map.put(inorder[i], i);
        
        System.out.println("Tree from Inorder and Preorder:");
        TreeNode rootPre = tree.buildTreePre(inorder, preorder, 0, inorder.length - 1, map);
        tree.inorder(rootPre);
        
        tree.postIndex = postorder.length - 1;
        System.out.println("\nTree from Inorder and Postorder:");
        TreeNode rootPost = tree.buildTreePost(inorder, postorder, 0, inorder.length - 1, map);
        tree.inorder(rootPost);
    }
}
